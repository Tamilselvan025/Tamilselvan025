public abstract class ProductForSale {
    protected  String type;
     protected double price;
   protected String description;
   protected double quantity;


    abstract void salesPrice(double quantity);
    abstract double salesPrice();
    abstract void printItem();
    abstract void showDetails();
    abstract double getQuantity();
}



class Rice extends ProductForSale{
private double grandPrice=1;
    public Rice(){
        this.price=56.34;
        this.type="RICE";
        this.quantity=1;
    }
    @Override
    void salesPrice(double quantity) {
        this.quantity = quantity;
        grandPrice=price*this.quantity;

    }

    double salesPrice(){
        return grandPrice;
    }


    @Override
    void printItem() {
        System.out.printf("%-10s (%-4.2f kg) : Rs.%-15.2f",type,getQuantity(),salesPrice());
        System.out.println();
    }

    @Override
    void showDetails() {
        System.out.println("-".repeat(10)+"RICE"+"-".repeat(10));
        System.out.println("Good for making Briyani "+"\n"+"high quality"+"\n"+"easy to cook");
        System.out.println("-".repeat(24));
    }

    @Override
    double getQuantity() {
        return quantity;
    }



}

class Wheat extends ProductForSale{
    private double grandPrice=1;
    public Wheat(){
        this.price=28.91;
        this.type="WHEAT";
        this.quantity=1;
    }
    @Override
    void salesPrice(double quantity) {
        this.quantity = quantity;
        grandPrice=price*this.quantity;
    }

   double salesPrice(){
        return grandPrice;
    }


    @Override
    void printItem() {
        System.out.printf("%-10s (%-4.2f kg) : Rs.%-15.2f",type,getQuantity(),salesPrice());
        System.out.println();
    }

    @Override
    void showDetails() {
        System.out.println("-".repeat(10)+"WHEAT"+"-".repeat(10));
        System.out.println("Good for making Chappati "+"\n"+"high quality"+"\n"+"easy to cook");
        System.out.println("-".repeat(25));
    }

    @Override
    double getQuantity() {
        return quantity;
    }



}

class Sugar extends ProductForSale{
    private double grandPrice=1;
    public Sugar(){
        this.price=42.67;
        this.type="SUGAR";
        this.quantity=1;
    }
    @Override
    void salesPrice(double quantity) {
        this.quantity = quantity;
        grandPrice=price*this.quantity;
    }

     double salesPrice(){
        return grandPrice;
    }


    @Override
    void printItem() {
        System.out.printf("%-10s (%-4.2f kg) : Rs.%-15.2f",type,getQuantity(),salesPrice());
        System.out.println();
    }

    @Override
    void showDetails() {
        System.out.println("-".repeat(10)+"SUGAR"+"-".repeat(10));
        System.out.println("Good for everything except health ! "+"\n"+"high quality"+"\n"+"easy to consume");
        System.out.println("-".repeat(25));
    }

    @Override
    double getQuantity() {
        return quantity;
    }

}

import java.util.ArrayList;

public class OrderItem {

private double totalAmount;

   private  ArrayList<ProductForSale> products;
   public OrderItem(ProductForSale product,double quantity) {
        this.products=new ArrayList<>();
        totalAmount=0;
        addProduct(product,quantity);
    }
    public OrderItem(){}
    public void addProduct(ProductForSale product,double quantity){

      if(!findExistingProduct(product,quantity)){
          product.salesPrice(quantity);
          products.add(product);
      }
    }
    private boolean findExistingProduct(ProductForSale product,double quantity){

        for(int i=0;i<products.size();i++){
            if(products.get(i).getClass().getSimpleName().equals(product.getClass().getSimpleName())){
                double update=products.get(i).getQuantity();

                 products.get(i).salesPrice(quantity+update);
                 return true;
            }
        }
         return false;
    }
    public void showDescription(String product){
      switch (product.toUpperCase()){
          case "RICE"->new Rice().showDetails();
          case "WHEAT"->new Wheat().showDetails();
          case "SUGAR"->new Sugar().showDetails();
          default -> {

              new Rice().showDetails();
              new Wheat().showDetails();
              new Sugar().showDetails();

          }
      }
    }
    public void printBill(){
        System.out.println("-".repeat(40));
       for(int i=0;i<products.size();i++){
           products.get(i).printItem();
           totalAmount+=products.get(i).salesPrice();
       }
        System.out.println("-".repeat(40));
        System.out.printf("%-22s: Rs.%-10.2f\n","TOTAL AMOUNT",getTotalAmount());
        System.out.println("-".repeat(40));
    }
    public double getTotalAmount(){
       return totalAmount;
    }


}

import java.util.LinkedList;


public class Store {

  private static int billID;
  private int billNo;
  private String customerName;
  private long contactNo;

  private LinkedList<OrderItem> list;

  private OrderItem forBill;

  public Store(String customerName, long contactNo, OrderItem items){
    this.customerName=customerName.toUpperCase();
    this.contactNo=contactNo;
    list=new LinkedList<>();
    addItems(items);
    billID++;
    this.billNo=billID;
    this.forBill=items;

  }

  public String getCustomerName() {
    return customerName;
  }

  public long getContactNo() {
    return contactNo;
  }

  private void addItems(OrderItem a){
    list.add(a);
  }
  public void printBill(){
    System.out.println("-".repeat(14)+"BILL NO : "+billNo+"-".repeat(15));
    forBill.printBill();
    System.out.println(" ".repeat(12)+"THANK YOU ");
    System.out.println(" ".repeat(12)+"VISIT AGAIN !!!!!! ");
    System.out.println("-".repeat(40));
  }
  public void printFullData(){
    System.out.printf("\nCUSTOMER NAME  : %-15s\n",customerName);
    System.out.printf("CONTACT NUMBER : %10d\n",contactNo);
    printBill();
  }
  public void showDescription(String product){
    new OrderItem().showDescription(product);
  }

}
import java.util.LinkedList;

public class StoreDataBase {
   private final LinkedList<Store> customerDetails;

    public StoreDataBase() {
        this.customerDetails=new LinkedList<>();
    }

    public void addCustomerDetails(Store a){
        customerDetails.add(a);
    }
    public void getCustomerDetails(String customerName){
        for(Store i:customerDetails){
            if(i.getCustomerName().contains(customerName.toUpperCase())){
                i.printFullData();
            }
        }
    }
    public void getCustomerDetails(long contactNo){
        for(Store i:customerDetails){
            if(i.getContactNo()==contactNo){
                i.printFullData();
            }
        }
    }
    public void getCustomerDetails(String customerName,long contactNo){
        getCustomerDetails(contactNo);
    }
}

public class Main {
    public static void main(String[] args) {
        StoreDataBase manager=new StoreDataBase();
        OrderItem div=new OrderItem(new Sugar(),4);
        div.addProduct(new Rice(),5);
        div.addProduct(new Sugar(),3);
        div.addProduct(new Sugar(),3);
        div.addProduct(new Sugar(),20);
        div.addProduct(new Wheat(),20);
        div.addProduct(new Rice(),10);
        Store Divya=new Store("divya bharathi",7200322364l,div);

        OrderItem tamil=new OrderItem(new Rice(),10);
        tamil.addProduct(new Wheat(),20);
        tamil.addProduct(new Sugar(),3);
        tamil.addProduct(new Rice(),20);
        Store Tamil=new Store("tamilselvan",8939023583l,tamil);
        manager.addCustomerDetails(Divya);
        manager.addCustomerDetails(Tamil);
        manager.getCustomerDetails("tamil");

    }
}

